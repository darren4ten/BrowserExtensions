// ==UserScript==
// @name         JST订单分析助手(Gem)
// @namespace    http://tampermonkey.net/
// @version      0.4
// @description  在特定页面显示圆圈，点击显示编辑框。在工单页支持选中文本之后代理公司或者查询线上订单号对应的日志。
// @match        *://*.jushuitan.com/epaas*
// @match        *://*.jushuitan.com/*
// @match        *://erp321.com/epaas*
// @match        https://w.erp321.com/*
// @grant        none
// @run-at       document-end
// @author      darren/炬木
// ==/UserScript==
/**
功能点：
1. 在DBMS页面会有提示功能
    --JST订单助手插件提示：
    --1.输入sto然后按Tab键将自动补充为：SELECT TOP(100) * from   ORDER BY 1 DESC，如果输入stoo则会补充当前公司id的条件;
    --2.Ctrl+K：注释或者反注释当前鼠标所在行
    --3.Ctrl+鼠标单击：选中鼠标所在行的SQL语句（自动识别多行的SQL语句）
2. 订单详情页会显示小圆圈，点击圆圈会弹出悬浮窗折叠显示订单的_OrderData,并支持复制和跳转到订单保存日志页面
3. 订单列表页会显示小圆圈，如果查询结果小于等于3则点击圆圈会显示列表上所有的行的json数据, 否则点击圆圈只会显示选中的数据记录。
4. 工单页面，选中文字会自动识别，如果识别的是纯数字，会在选中文字的左上角显示两个按钮：代理登录（选中的数字）（点击会自动代理登录该公司），SoId订单报文（选中的数字）；
    如果识别的不是数字且长度小于32则会提示SoId订单报文（选中的文本），点击会跳转到订单报文页面并查询当前选中文本的日志。
**/
(function() {
    'use strict';

    // 判断当前页面类型
    function isOrderDetailPage() {
        return window.location.href.indexOf('app/order/order/OrderEditorNew.aspx') !== -1;
    }

    function isOrderListPage() {
        return window.location.href.indexOf('app/order/order/list.aspx') !== -1;
    }

    function isOrderToolPage(){
        return window.location.href.indexOf('admin/internal/ops/OrderAnalysisOps.aspx') !== -1;
    }

    function isTicketPage(){
        return window.location.href.indexOf('tool.jushuitan.com/ticket') !== -1;
    }
    //是搜索公司进行代理的页面
    function isPorxyCompanyPage(){
        return window.location.href.indexOf('app/user/company/company.aspx') !== -1;
    }

    function isDBMSQueryPage(){
        return window.location.href.indexOf('DBEngine/Query?') !== -1;
    }

    function canEnableJumptoProxyCompany(){
        return isTicketPage();
    }

    // 创建圆圈元素
    function createCircle() {
        const circle = document.createElement('div');
        circle.style.position = 'fixed';
        circle.id = 'k_circle_231';
        circle.textContent = 'JST';
        circle.style.top = '80px';
        circle.style.right = '34px';
        circle.style.width = '60px';
        circle.style.height = '60px';
        circle.style.lineHeight = '60px';
        circle.style.fontSize = '14px';
        circle.style.textAlign = 'center';
        circle.style.color = '#ffbc00';
        circle.style.borderRadius = '50%';
        circle.style.backgroundColor = 'green';
        circle.style.draggable="false";
        circle.style.zIndex = 9999;
        circle.draggable = true;
        document.body.appendChild(circle);

        circle.addEventListener('click', () => {
            showEditBox();
        });
        let isDragging = false;
        let offsetX, offsetY;
        circle.addEventListener('mousedown', (e) => {
            isDragging = true;
            offsetX = e.clientX - circle.offsetLeft;
            offsetY = e.clientY - circle.offsetTop;
            // circle.textContent='start..'
            e.preventDefault(); // Prevent default drag behavior
        });
        document.addEventListener('mousemove', (e) => {
            if (isDragging) {
                circle.style.left = e.clientX - offsetX + 'px';
                circle.style.top = e.clientY - offsetY + 'px';
                // circle.textContent='moving'
            }
        });
        circle.addEventListener('mouseup', () => {
            isDragging = false;
            // circle.textContent='stop..'
        });
        return circle;
    }


    // 创建编辑框
    function createEditBox() {
        const editBox = document.createElement('div');
        editBox.id = 'k_editbox_231';
        editBox.style.position = 'fixed';
        editBox.style.top = '50%';
        editBox.style.right = '20px';
        editBox.style.transform = 'translate(-50%, -50%)';
        editBox.style.width = '600px';
        editBox.style.height = '500px';
        editBox.style.backgroundColor = '#fff';
        editBox.style.border = '1px solid #ccc';
        editBox.style.padding = '20px';
        editBox.style.zIndex = 99999;

        const title = document.createElement('div');
        title.textContent = 'OrderData内容';
        title.style.position = 'fixed';
        title.style.top = '0';
        title.style.left = '0';
        title.style.width = '100%';
        title.style.height = '30px';
        title.style.lineHeight = '30px';
        title.style.paddingLeft = '8px';
        title.style.backgroundColor = '#f0f0f0';
        title.style.cursor = 'move';
        editBox.appendChild(title);

        const content = document.createElement('div');
        content.style.height = 'calc(100% - 30px)';
        content.style.overflowY = 'auto';
        content.style.margin = '20px 2px';
        editBox.appendChild(content);

        const closeBtn = document.createElement('button');
        closeBtn.textContent = 'X';
        closeBtn.style.position = 'fixed';
        closeBtn.style.border = '0px solid gray';
        closeBtn.style.top = '4px';
        closeBtn.style.right = '10px';
        closeBtn.style.zIndex = 999999;
        editBox.appendChild(closeBtn);

        document.body.appendChild(editBox);
        // 使标题栏可拖动
        let isDragging = false;
        let offsetX, offsetY;
        title.addEventListener('mousedown', (e) => {
            isDragging = true;
            offsetX = e.clientX - editBox.offsetLeft;
            offsetY = e.clientY - editBox.offsetTop;
        });
        document.addEventListener('mousemove', (e) => {
            if (isDragging) {
                editBox.style.left = e.clientX - offsetX + 'px';
                editBox.style.top = e.clientY - offsetY + 'px';
            }
        });
        document.addEventListener('mouseup', () => {
            isDragging = false;
        });

        // 关闭按钮点击事件
        closeBtn.addEventListener('click', () => {
            editBox.remove();
        });

        //复制按钮
        const copyButton = document.createElement('button');
        copyButton.textContent = '复制';
        copyButton.style.position = 'absolute';
        copyButton.style.top = '40px';
        copyButton.style.color = 'green';
        copyButton.style.right = '60px';
        editBox.appendChild(copyButton);
        copyButton.addEventListener('click', () => {
            const dataToCopy = JSON.stringify(getJsonData(), null, 4); // 格式化JSON字符串
            navigator.clipboard.writeText(dataToCopy)
                .then(() => {
                alert('复制成功！');
            })
                .catch(err => {
                console.error('复制失败：', err);
            });
        });

        // 显示美化后的数据
        var data=getJsonData();
        if (data) {
            // content.textContent = JSON.stringify(_OrderData, null, 4);
            // console.log('--loadJsonViewer--');
            loadJsonViewer(content,data);
        } else {
            content.textContent = '没有选中的数据';
        }

        // 创建底部固定栏
        const bottomBar = document.createElement('div');
        bottomBar.style.position = 'fixed';
        bottomBar.style.bottom = '0';
        bottomBar.style.left = '0';
        bottomBar.style.width = '100%';
        bottomBar.style.height = '32px';
        bottomBar.style.backgroundColor = '#f0f0f0'; // 设置背景色，可自定义
        editBox.appendChild(bottomBar);
        if(isOrderDetailPage()){
            // 创建按钮
            const saveLogButton = document.createElement('button');
            saveLogButton.textContent = '订单保存日志';
            saveLogButton.style.position = 'absolute';
            saveLogButton.style.right = '20px'; // 调整按钮位置
            saveLogButton.style.top = '50%';
            saveLogButton.style.transform = 'translateY(-50%)';
            saveLogButton.addEventListener('click', () => {
                window.open(`https://w.erp321.com/admin/internal/ops/OrderAnalysisOps.aspx?fromBrowersExt=1&_ext_shopid=${data.shop_id}&_ext_soid=${data.so_id}&_ext_start=&_ext_end=`);
            });
            // 将按钮添加到底部固定栏
            bottomBar.appendChild(saveLogButton);
        }
    }

    function getJsonData(){
        if(isOrderDetailPage()){
            return _OrderData;
        }else if(isOrderListPage()){
            var checkdedData= jTable.GetCheckedJRows().map(p=>p.Data);
            if(checkdedData && checkdedData.length>0){
                return checkdedData;
            }
            if(jTable.Rows.length<=3){
                return jTable.Rows.map(p=>p.Data);
            }
        }
        return null;
    }

    //将jquery.json-viewer代码直接压缩在js中加载，防止网络太慢导致加载不及时
    //          https://abodelot.github.io/jquery.json-viewer/json-viewer/jquery.json-viewer
    function preLoadJsonPrettyPlugin(){
        //加载json格式化插件js
        var scriptText=`(function($){function isCollapsable(arg){return arg instanceof Object&&Object.keys(arg).length>0}function isUrl(string){var protocols=['http','https','ftp','ftps'];for(var i=0;i<protocols.length;++i){if(string.startsWith(protocols[i]+'://')){return true}}return false}function htmlEscape(s){return s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/'/g,'&apos;').replace(/"/g,'&quot;')}function json2html(json,options){var html='';if(typeof json==='string'){json=htmlEscape(json);if(options.withLinks&&isUrl(json)){html+='<a href="'+json+'" class="json-string" target="_blank">'+json+'</a>'}else{json=json.replace(/&quot;/g,'\\&quot;');html+='<span class="json-string">"'+json+'"</span>'}}else if(typeof json==='number'||typeof json==='bigint'){html+='<span class="json-literal">'+json+'</span>'}else if(typeof json==='boolean'){html+='<span class="json-literal">'+json+'</span>'}else if(json===null){html+='<span class="json-literal">null</span>'}else if(json instanceof Array){if(json.length>0){html+='[<ol class="json-array">';for(var i=0;i<json.length;++i){html+='<li>';if(isCollapsable(json[i])){html+='<a href class="json-toggle"></a>'}html+=json2html(json[i],options);if(i<json.length-1){html+=','}html+='</li>'}html+='</ol>]'}else{html+='[]'}}else if(typeof json==='object'){if(options.bigNumbers&&(typeof json.toExponential==='function'||json.isLosslessNumber)){html+='<span class="json-literal">'+json.toString()+'</span>'}else{var keyCount=Object.keys(json).length;if(keyCount>0){html+='{<ul class="json-dict">';for(var key in json){if(Object.prototype.hasOwnProperty.call(json,key)){let jsonElement=json[key];key=htmlEscape(key);var keyRepr=options.withQuotes?'<span class="json-string">"'+key+'"</span>':key;html+='<li>';if(isCollapsable(jsonElement)){html+='<a href class="json-toggle">'+keyRepr+'</a>'}else{html+=keyRepr}html+=': '+json2html(jsonElement,options);if(--keyCount>0){html+=','}html+='</li>'}}html+='</ul>}'}else{html+='{}'}}}return html}$.fn.jsonViewer=function(json,options){options=Object.assign({},{collapsed:false,rootCollapsable:true,withQuotes:false,withLinks:true,bigNumbers:false},options);return this.each(function(){var html=json2html(json,options);if(options.rootCollapsable&&isCollapsable(json)){html='<a href class="json-toggle"></a>'+html}$(this).html(html);$(this).addClass('json-document');$(this).off('click');$(this).on('click','a.json-toggle',function(){var target=$(this).toggleClass('collapsed').siblings('ul.json-dict, ol.json-array');target.toggle();if(target.is(':visible')){target.siblings('.json-placeholder').remove()}else{var count=target.children('li').length;var placeholder=count+(count>1?' items':' item');target.after('<a href class="json-placeholder">'+placeholder+'</a>')}return false});$(this).on('click','a.json-placeholder',function(){$(this).siblings('a.json-toggle').click();return false});if(options.collapsed==true){$(this).find('a.json-toggle').click()}})}})(jQuery);`;
        // 注入自定义 JavaScript
        const script = document.createElement('script');
        script.textContent =scriptText;
        (document.head || document.documentElement).appendChild(script);

        const style = document.createElement('style');
        style.textContent = '.json-document{padding:1em 2em}ul.json-dict,ol.json-array{list-style-type:none;margin:0 0 0 1px;border-left:1px dotted #ccc;padding-left:2em}.json-string{color:#0B7500}.json-literal{color:#1A01CC;font-weight:bold}a.json-toggle{position:relative;color:inherit;text-decoration:none}a.json-toggle:focus{outline:none}a.json-toggle:before{font-size:1.1em;color:#c0c0c0;content:"\u25BC";position:absolute;display:inline-block;width:1em;text-align:center;line-height:1em;left:-1.2em}a.json-toggle:hover:before{color:#aaa}a.json-toggle.collapsed:before{transform:rotate(-90deg)}a.json-placeholder{color:#aaa;padding:0 1em;text-decoration:none}a.json-placeholder:hover{text-decoration:underline}';
        // 将 <style> 元素添加到 <head> 中
        document.head.appendChild(style);
        // console.log('动态添加preLoadJsonPrettyPlugin');
    }

    let isJsonViewerPluginLoaded=false;
    function loadJsonViewer(container,dataObj){
        if(!isJsonViewerPluginLoaded){
            preLoadJsonPrettyPlugin();
            isJsonViewerPluginLoaded=true;
            setTimeout(()=>{
                $(container).jsonViewer(dataObj,{collapsed: true,rootCollapsable:false});
            },100);
        }
        return;
        var link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = 'https://abodelot.github.io/jquery.json-viewer/json-viewer/jquery.json-viewer.css';
        document.head.appendChild(link);

        // 引入CodeMirror的JS
        var script = document.createElement('script');
        script.src = 'https://abodelot.github.io/jquery.json-viewer/json-viewer/jquery.json-viewer.js';
        document.head.appendChild(script);

        // 等待CodeMirror加载完成
        script.onload = function() {
            $(container).jsonViewer(dataObj,{collapsed: true,rootCollapsable:false});
        };
    }

    // 显示编辑框
    function showEditBox() {
        if (!document.querySelector('.edit-box') && !document.getElementById('k_editbox_231')) {
            createEditBox();
        }
    }

    function getParameterByName(name) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(name);
    }


    //#region ---------------------DBMS相关操作

    function addTextToCodeMirror(cm) {
        var tip=`--JST订单助手插件提示：
--1.输入sto然后按Tab键将自动补充为：SELECT TOP(100) * from   ORDER BY 1 DESC，如果输入stoo则会补充当前公司id的条件;
--2.Ctrl+K：注释或者反注释当前鼠标所在行
--3.Ctrl+鼠标单击：选中鼠标所在行
`;
        // 获取当前光标位置
        const cursor = cm.getCursor();
        const firstLine = cm.getLine(0);
        if(firstLine && firstLine.indexOf('JST订单助手')>-1){
            return;
        }
        // 在编辑框的开头插入文本
        cm.replaceRange(tip, { line: 0, ch: 0 });
        // 重新设置光标位置（可选）
        cm.setCursor({ line: cursor.line, ch: cursor.ch + tip.length });
    }

    function getContextInfo(cm){
        // 获取 CodeMirror 的所有文本
        const content = cm.getValue();
        // 正则表达式匹配目标文本
        const regex = /-- 公司编号：(\d+) 公司名称：[^ ]+ 分表：(\d{5,})  where co_id = \1/;
        const match = content.match(regex);

        if (match) {
            const coId = match[1];
            let extId = match[2].slice(-2);
            if(isNaN(coId) || isNaN(extId)){
                return null;
            }
            console.log(`co_id: ${coId}, extId: ${extId}`);
            extId=parseInt(extId);
            return {coId,extId};
        }
        return null;
    }

    // 检查行内容是否为空
    function isEmptyLine(line) {
        return !line.trim();
    }

    // 检查行内容是否包含分号或 "go"
    function containsSemicolonOrGo(line) {
        return line.includes(';') || line.toLowerCase().includes('go');
    }

    //Ctrl+鼠标左键 选中当前的查询语句
    function handleCtrlClickToSelectRows(cm, e) {
        if (!e.ctrlKey) return;// Only proceed if Ctrl is pressed

        const pos = cm.coordsChar({ left: e.clientX, top: e.clientY });
        const cursor = cm.getCursor(pos);
        const line = cursor.line;
        const lineText = cm.getLine(line).trim();

        if (lineText === '') return;  // Do nothing if the line is empty

        const hasSemicolonOrGo = lineText.includes(';') || lineText.toLowerCase().includes('go');
        let startLine = line;
        let endLine = line;

        // Function to check if a line is non-empty and doesn't contain semicolon or 'go'
        function isValidLine(txt) {
            return txt.trim() !== '' && !txt.includes(';') && !txt.toLowerCase().includes('go');
        }

        // Find contiguous non-empty lines above
        while (startLine > 0) {
            const prevLineText = cm.getLine(startLine - 1).trim();
            if (isValidLine(prevLineText)) {
                startLine--;
            } else {
                break;
            }
        }

        if (!hasSemicolonOrGo) {
            while (endLine < cm.lineCount() - 1) {
                const nextLineText = cm.getLine(endLine + 1).trim();
                endLine++;
                if (isValidLine(nextLineText)) {
                } else {
                    break;
                }
            }
        }

        // Select the range of lines
        cm.setSelection({ line: startLine, ch: 0 }, { line: endLine, ch: cm.getLine(endLine).length });
    }

    // 自定义功能实现
    function enhanceCodeMirror(cm,context) {
        // 自动补全功能
        cm.addKeyMap({
            'Tab': function(cm) {
                const cursor = cm.getCursor();
                const line = cursor.line;
                const ch = cursor.ch;

                // Get the current line's text
                const currentLineText = cm.getLine(line);
                var stoFunc=()=>{
                    cm.replaceRange('SELECT TOP(100) * FROM  ORDER BY 1 DESC;', { line, ch: 0 }, { line, ch: currentLineText.length });
                    const newCursorPosition = { line, ch: 'SELECT TOP(100) * FROM '.length };
                    cm.setCursor(newCursorPosition);
                };
                // Check if the current line text is 'sto'
                if (currentLineText.trim() === 'sto') {
                    stoFunc();
                } else if (currentLineText.trim() === 'stoo') {
                    if(context){
                        cm.replaceRange(`SELECT TOP(100) * FROM _${context.extId} WHERE co_id=${context.coId}  ORDER BY 1 DESC;`, { line, ch: 0 }, { line, ch: currentLineText.length });
                        const newCursorPosition = { line, ch: 'SELECT TOP(100) * FROM '.length };
                        cm.setCursor(newCursorPosition);
                    }else{
                        stoFunc();
                    }

                }else {
                    // If not 'sto', perform the default Tab behavior
                    cm.execCommand('insertTab');
                }
            }
        });

        // 注释或反注释当前行
        cm.addKeyMap({
            'Ctrl-K': function(cm) {
                let cursor = cm.getCursor();
                let line = cm.getLine(cursor.line);
                if (line.startsWith('--')) {
                    cm.replaceRange(line.slice(2), { line: cursor.line, ch: 0 }, { line: cursor.line, ch: line.length });
                } else {
                    cm.replaceRange('--' + line, { line: cursor.line, ch: 0 }, { line: cursor.line, ch: line.length });
                }
            }
        });
        cm.getWrapperElement().addEventListener('click', (e) => handleCtrlClickToSelectRows(cm, e));

        // // Ctrl + 鼠标单击选中当前行
        // cm.on('mousedown', function(cm, event) {
        //     if (event.ctrlKey && event.button === 0) {
        //         let pos = cm.coordsChar({ left: event.clientX, top: event.clientY });
        //         let line = pos.line;
        //         cm.setSelection({ line: line, ch: 0 }, { line: line + 1, ch: 0 });
        //     }
        // });
    }

    //DBMS页面代码快捷键
    //     function waitForCodeMirror() {
    //         const observer = new MutationObserver(() => {
    //             // 等待 CodeMirror 实例可用
    //             // 查找所有 CodeMirror 实例
    //             const editor= document.querySelector('.CodeMirror');
    //             const cm =editor? editor.CodeMirror:null; // 获取 CodeMirror 实例
    //             if (!cm) return;
    //             cm.focus();
    //             var contextInfo=getContextInfo(cm);
    //             addTextToCodeMirror(cm);
    //             enhanceCodeMirror(cm,contextInfo);
    //             // 停止观察
    //             observer.disconnect();
    //         });

    //         // 开始观察整个文档
    //         observer.observe(document.body, { childList: true, subtree: true });
    //     }
    function waitForCodeMirror() {
        let checkCount=0;
        const checkCodeMirror = () => {
            checkCount++;
            const editor = document.querySelector('.CodeMirror');
            const cm = editor ? editor.CodeMirror : null;
            if (cm) {
                cm.focus();
                var contextInfo = getContextInfo(cm);
                addTextToCodeMirror(cm);
                enhanceCodeMirror(cm, contextInfo);
                clearInterval(intervalId); // 找到 CodeMirror 实例后停止轮询
            }
            if(checkCount>150){
                clearInterval(intervalId); //如果超过次数也停止轮寻
            }
        };

        const intervalId = setInterval(checkCodeMirror, 100); // 每100毫秒检查一次
    }
    //#endregion ---------------------DBMS相关操作

    //自动加载订单工具参数并查询
    function autoSearchOrderTool(){
        console.log('autoSearchOrderTool start...');
        var fromBrowersExt=getParameterByName('fromBrowersExt');
        if(!fromBrowersExt){
            return;
        }
        console.log('autoSearchOrderTool executed...');
        var soId=getParameterByName('_ext_soid');
        var start=getParameterByName('_ext_start');
        var end=getParameterByName('_ext_end');
        var shopId=parseInt(getParameterByName('_ext_shopid'));
        if(!isNaN(shopId)){
            vm.$data.oQueryForm.iShopId=shopId;
        }
        vm.$data.oQueryForm.sOrderId=soId;
        vm.fnQuery();
    }

    function navToProxyCompany(){
        if(!getParameterByName("fromBrowersExt")){
            return;
        }
        var coId=getParameterByName('_ext_coid');
        if(isNaN(coId)){
            return;
        }
        if($('.error-title').length>0){
            return;
        }
        _CallPage("AdminLogin", null, parseInt(coId), null);
        setTimeout(()=>{
            if($('#msg_body').is(':visible')){
                return;
            }
            window.close();
        },600);
    }

    function matchContextConditon(selectedText){
        var maybeCoId=false;
        var maybeSoId=false;
        if(selectedText.length>32 || selectedText.length<5){
            return {maybeCoId,maybeSoId};
        }
        if((isNaN(selectedText) || selectedText.length>11)&& selectedText.indexOf(' ')<=0 && selectedText.indexOf('\t')<=0){
            maybeSoId=true;
        }
        if(!isNaN(selectedText)){
            maybeCoId=true;
            maybeSoId=true;
        }
        return {maybeCoId,maybeSoId};
    }
    function buildContextLi(desc,text,onClick){
        let li = document.createElement('li');
        li.id='_nav_ordertool';
        let btn=document.createElement('button');
        btn.innerHTML=`<span style=''>${desc}(</span><span style="color:green">${text}</span><span>)</span>`;
        btn.addEventListener('click', function(event) {
            onClick && onClick(text,event);
        });
        li.appendChild(btn);
        return li;
    }
    function buildContextMenu(selectedText){
        selectedText=selectedText.trim();
        var conditon= matchContextConditon(selectedText);
        if(!conditon.maybeCoId&& !conditon.maybeSoId){
            return null;
        }
        var div = document.createElement('div');
        div.style.position = 'absolute';
        div.style.zIndex = '9999';
        div.style.top = event.clientY - 60 + 'px';
        div.style.left = event.clientX - 180 + 'px';
        var ul = document.createElement('ul');
        if(conditon.maybeCoId){
            let li= buildContextLi('代理登录',selectedText,(txt)=>{
                window.open('https://w.erp321.com/app/user/company/company.aspx?_c=jst-epaas&fromBrowersExt=1&_ext_coid=' + txt);
            });
            ul.appendChild(li);
        }
        if(conditon.maybeSoId){
            let li= buildContextLi('SoId订单报文',selectedText,(txt)=>{
                window.open(`https://w.erp321.com/admin/internal/ops/OrderAnalysisOps.aspx?fromBrowersExt=1&_ext_soid=${txt}&_ext_start=&_ext_end=`);
            });
            ul.appendChild(li);
        }
        div.appendChild(ul);
        return div;
    }

    function enableJumptoProxyPage(){
        let div; // 用于存储创建的按钮
        document.addEventListener('mouseup', function(event) {
            const selectedText = window.getSelection().toString().trim();
            if(!div){
                div=buildContextMenu(selectedText);
                if(div){
                    document.body.appendChild(div);
                }
            }else{
                var conditon= matchContextConditon(selectedText);
                if(!conditon.maybeCoId&& !conditon.maybeSoId && div){
                    document.body.removeChild(div);
                    div=null;
                }else{
                    div.style.top = event.clientY - 20 + 'px';
                    div.style.left = event.clientX + 10 + 'px';
                }
            }
        });
    }



    console.log('JST tool ...');
    if (isOrderDetailPage() || isOrderListPage()) {
        createCircle();
    }else if(isOrderToolPage()){
        autoSearchOrderTool();
    }else if(canEnableJumptoProxyCompany()){
        enableJumptoProxyPage();
    }else if(isPorxyCompanyPage()){
        navToProxyCompany();
    }else if(isDBMSQueryPage()){
        waitForCodeMirror();
        // enableCodeSnippits();
    }

})();
